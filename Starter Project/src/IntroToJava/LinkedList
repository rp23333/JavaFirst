package lists;
public class LinkedList<Q> {

	private class Node{

		Q info;
		Node next;
		int size;
	
		public Node(Q i, Node n) {
			info = i;
			next = n;
		}

		private Node head = null;
		
		// both the add methods one with parameter one without

		public void add(Q info) {

			Node newNode = new Node(info, null);

			if(head == null) {
				head = newNode;
				size++;
			}

			else {
				Node curr = head;
				size++;
				while(curr.next != null) {
					curr = curr.next;
				}

				curr.next = newNode;
			}

		}
		
		public void addIndex(Q info, int i){

	        Node curr = head;
	        Node newNode = new Node(info, curr);
	        if (i == 0){
	            head = newNode;
	        }
	        else{
	            for(int j = 0; j < i - 1; j++){
	                curr = curr.next;
	            }
	            newNode = new Node(info, curr.next);
	            curr.next = newNode;
	        }
	    }

		
		public Q get(int i) {
			
			try {
				
				Node curr = head;
				
				for(int j = 0; j < i; j++) {
					curr = curr.next;
				}
				
				return curr.info;
			}
			
			catch(NullPointerException e) {
				throw new IndexOutOfBoundsException();	
				}
	
		}
		
		
		
		public Q remove(int i){
	        try {
	            Q storedInfo;
	            if (i == 0){
	                storedInfo = head.info;
	                head = head.next;
	            }
	            else{
	                Node curr = head;
	                for (int j = 1; j <= i - 1; j++) {
	                    curr = curr.next;
	                }
	                storedInfo = curr.next.info;
	                curr.next = curr.next.next;
	            }
	            return storedInfo;
	        }
	        catch(NullPointerException e) {
	            throw new IndexOutOfBoundsException();
	        }
	    }
		
		public String toString() {
			String output = "";
			
			Node curr = head;
			while (curr != null) {
				output += curr.info.toString() + " ->";
				
				curr = curr.next;
			}
			
			return output;
			
		}
		
		public int size(int i) {
			return size;
		}
		
			

	}

	

	

}
