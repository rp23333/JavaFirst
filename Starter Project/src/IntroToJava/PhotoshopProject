package IntroToJava;

//Photoshop program that can run several manipulations on 
//an image
//filler code by Mr. David

// Project by Rohan Patel
// my extra feature is the colorize method

import java.awt.Color;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;

public class PhotoshopProject extends Component {

	// the name of the output file. will be determined by which methods are called
 private String outputName;
 
 // the 2d array of colors representing the image
 private Color[][] pixels;
 
 // the width and height of the image 
 private int w,h;
 

 // this method increases each color's rgb value by a given amount.
 // don't forget that rgb values are limited to the range [0,255]
 public void brighten(int increase) {
     outputName = "brightened_" + outputName;
     
     // for loop goes through the pixels in the array
     for(int i = 0; i < pixels.length; i++) {
     	for(int j = 0; j < pixels[i].length; j++) {
     		
     		// the color values brighten or increase depending on the input by the user
     		int r = pixels[i][j].getRed() + increase;
     		int g = pixels[i][j].getGreen() + increase;
     		int b = pixels[i][j].getBlue() + increase;
     		
     		// incase the values of the colors get too high or too low, 
     		// these if statements stop the code from going past the limit and crashing
     		if(r > 255) r = 255;
     		else if (r < 0) r = 0;
     		if(g > 255) g = 255;
     		else if (g < 0) g = 0;
     		if(b > 255) b = 255;
     		else if (b < 0) b = 0;
     		
     		// the brightened colors replace the old colors for each pixel in the array
     		pixels[i][j] = new Color(r, g, b);
     	}
     }
     
 }
 
 // flip an image either horizontally or vertically.
 public void flip(boolean horizontally) {
     outputName = (horizontally?"h":"v") + "_flipped_" + outputName;
     
     // if the user wants a horizontal flip, this happens
     if (horizontally == true) {
    	 for ( int i = 0; i < pixels.length;i++) {
     		for (int j = 0; j < pixels[i].length/2; j++) {
     			
     			// this nested for loop goes through each pixel and replaces them backwards 
     			// it goes from the outside to the inside
     			Color spot = pixels [i][j];
     			// the variable "spot" holds the pixel colors while they switch places
     			pixels [i] [j] = pixels[i] [pixels[i].length-1-j];
     			pixels[i][pixels[i].length-1-j] = spot;
     		}
     	}
     }
  // if the user wants a vertical flip, this happens
     else {
     	for (int i = 0; i < pixels.length/2;i++) {
            for (int j = 0; j < pixels[i].length; j++) {
            	// this nested for loop goes through each pixel and replaces them backwards 
     			// it goes from top and bottom to the middle
            	Color spot = pixels [i][j];
            	// the variable "spot" holds the pixel colors while they switch places
            	pixels [i] [j] = pixels[pixels.length-1-i] [j];
            	pixels[pixels.length-1-i][j] = spot;
             }
         }
     }
     
 }
 
 // negates an image
 // to do this: subtract each pixel's rgb value from 255 
 // and use this as the new value
 public void negate() {
     outputName = "negated_" + outputName;
     
     //this nested for loop goes through all the pixels in the image
     for (int i = 0; i < pixels.length; i++) {
     	for (int j = 0; j < pixels[i].length; j++) {
     		Color color = pixels[i][j];
     		
     		// it subtracts the colors from 255
     		int r = 255-color.getRed();
     		int g = 255-color.getGreen();
     		int b = 255-color.getBlue(); 
     		
     		// the pixels are replaced with these new colors
     		pixels[i][j] = new Color(r, g, b);
     	}
     }
 }
 
 // this makes the image 'simpler' by redrawing it using only a few colors
 // to do this: for each pixel, find the color in the list that is closest to
 // the pixel's rgb value. 
 // use this predefined color as the rgb value for the changed image.
 public void simplify() {
 
 		// the list of colors to compare to. Feel free to change/add colors
 		Color[] colorList = {Color.BLUE, Color.RED,Color.ORANGE, Color.MAGENTA,
             Color.BLACK, Color.WHITE, Color.GREEN, Color.YELLOW, Color.CYAN};
     outputName = "simplified_" + outputName;
     
     // this nested for loop goes through all the pixels
     for (int i = 0; i < pixels.length; i++) {
     	for (int j = 0; j < pixels[i].length; j++) {
     		
     		// this is the current color of the pixels
     		Color color = pixels[i][j];
     		
     		// for now, the closest color is assigned a random color
     		Color closestColor = Color.RED;
     		// this for loop goes through all the colors in the colorList array
     		// it replaces the color depending its closest match
     		for (int m = 0; m < colorList.length; m++) {
     			if (distance(color,colorList[m]) < distance(color,closestColor) ) {
     				
     				closestColor = colorList[m];
         		}
     		}
     		// pixels are replaced with the closest color from the colorList array
     		pixels [i][j] = closestColor;
     	}
     }
      
 }
 
 // optional helper method (recommended) that finds the 'distance' 
 // between two colors.
 // use the 3d distance formula to calculate
 public double distance(Color c1, Color c2) {
 		// the distance formula used by the simplify method
 		return Math.sqrt(Math.pow(c1.getRed()-c2.getRed(), 2)+Math.pow(c1.getGreen()-c2.getGreen(), 2)+Math.pow(c1.getBlue()-c2.getBlue(), 2));	
 }
 
 // this blurs the image
 // to do this: at each pixel, sum the 8 surrounding pixels' rgb values 
 // with the current pixel's own rgb value. 
 // divide this sum by 9, and set it as the rgb value for the blurred image
 public void blur() {
		outputName = "blurred_" + outputName;
		
		Color[][] theImage = new Color[h][w];
		for (int i = 3; i < pixels.length-3; i++) {
        	for (int j = 3; j < pixels[i].length-3; j++) {
        		// this nested for loop goes through 7 by 7 pixel squares
        		int rValue = 0, gValue = 0, bValue = 0;
        		// these values hold the total color values of the 7 by 7 square
        		for (int m = i-3; m <= i+3; m++) {
        			for (int n = j-3; n <= j+3; n++) {
        				// the values increase by the values of the pixels
        				rValue += pixels[m][n].getRed();
        				gValue += pixels[m][n].getGreen();
        				bValue += pixels[m][n].getBlue();
        			
        			}
        		}
        		// the average color values are obtained by dividing by the total number of pixels
        		// the pixels are replaced by the blurred pixels
        		theImage[i][j] = new Color(rValue/49, gValue/49, bValue/49);
        	}
		}
		for ( int i = 3; i < pixels.length-3;i++) {
        	for (int j = 3; j < pixels[i].length-3; j++) {
        		// fills in the image with the 2d array we created
        		pixels [i] [j] = theImage[i] [j];
        	}
       	}
	}
 
 // this highlights the edges in the image, turning everything else black. 
 // to do this: at each pixel, sum the 8 surrounding pixels' rgb values. 
 // now, multiply the current pixel's rgb value by 8, then subtract the sum.
 // this value is the rgb value for the 'edged' image
 public void edge() {
     outputName = "edged_" + outputName;

     Color[][] theImage = new Color[h] [w];
     for ( int i = 1; i < pixels.length-1;i++) {
     	for (int j = 1; j < pixels[i].length-1; j++) {
     		int rValue = 0, gValue = 0, bValue = 0;
     		for (int k = i-1; k <= i+1; k++) {
     			for (int l = j-1; l <= j+1; l++) {
     				// the values of the pixels are held by these variables
     				rValue += pixels[k] [l].getRed();
     				gValue += pixels[k] [l].getGreen();
     				bValue += pixels[k] [l].getBlue();
     			}
     		}
     		
     		//the color values are subtracted by the sum of pixels
     		int newColorRed = rValue-9*pixels [i] [j].getRed();
     		int newColorGreen = gValue-9*pixels [i] [j].getGreen();
     		int newColorBlue = bValue-9*pixels [i] [j].getBlue();
     		
     		// if statements prevent the color values from exceeding limits
     		if (newColorRed > 255) newColorRed = 255;
     		else if (newColorRed < 0) newColorRed = 0;
     		
     		if (newColorGreen > 255) newColorGreen = 255;
     		else if (newColorGreen < 0) newColorGreen = 0;
     		
     		if (newColorBlue > 255) newColorBlue = 255;
     		else if (newColorBlue < 0) newColorBlue = 0;
     			
     		
     		// replaces the pixels with the new colors
     		theImage [i][j] = new Color (newColorRed, newColorGreen, newColorBlue);
     	}
		}
     
     for ( int i = 1; i < pixels.length-1;i++) {
     	for (int j = 1; j < pixels[i].length-1; j++) {
     		// replaces the pixels with the new colors/values
     		pixels[i][j] = theImage [i][j];
     	}
     }
     
 }
 
 // the colorize method picks a random color (red, green, or blue) and draws the image the image using only that color
 // the other colors are made zero
 public void colorize() {
	 outputName = "colorized_" + outputName;
	 
	 // a random integer is picked
	 int randNum = (int) ((Math.random()*3)+1);
	 for(int i = 0; i < pixels.length; i++) {
	     	for(int j = 0; j < pixels[i].length; j++) {
	     		
	     		// these instance variables hold the colors of the pixels
	     		int r = pixels[i][j].getRed();
	     		int g = pixels[i][j].getGreen();
	     		int b = pixels[i][j].getBlue();
	     		
	     		// depending on the random number chosen, the code will keep one color and scrap the other two
	     		if(randNum==1) {
	     			pixels[i][j] = new Color(r, 0, 0);
	     		}
	     		
	     		else if(randNum==2) {
	     			pixels[i][j] = new Color(0, g, 0);
	     		}
	     		
	     		else {
	     			pixels[i][j] = new Color(0, 0, b);
	     		}
	     	}
	 }
 }
 
 
 
 
 // *************** DON'T MESS WITH THE BELOW CODE **************** //
 
 // feel free to check it out, but don't change it unless you've consulted 
 // with Mr. David and understand what the code's doing
 
 

 public void run() {
 	JFileChooser fc = new JFileChooser();
		File workingDirectory = new File(System.getProperty("user.dir")+System.getProperty("file.separator")+ "Images");
		fc.setCurrentDirectory(workingDirectory);
		fc.showOpenDialog(null);
		File my_file = fc.getSelectedFile();
		if (my_file == null)
			System.exit(-1);

		// reads the image file and creates our 2d array
     BufferedImage image;
		try {
			image = ImageIO.read(my_file);

	        BufferedImage new_image = new BufferedImage(image.getWidth(),
	                        image.getHeight(), BufferedImage.TYPE_INT_ARGB);
	        create_pixel_array(image);
			outputName = my_file.getName();

			// runs the manipulations determined by the user
			System.out.println("Enter the manipulations you would like to run on the image.\nYour "
					+ "choices are: brighten, flip, negate, blur, edge, crop, colorize, or simplify.\nEnter each "
					+ "manipulation you'd like to run, then type in 'done'.");
			Scanner in = new Scanner(System.in);
			String action = in.next().toLowerCase();
			while (!action.equals("done")) {
	    			try {
		    			if (action.equals("brighten")) {
		    				System.out.println("enter an amount to increase the brightness by");
		    				int brightness = in.nextInt();
		        			Method m = getClass().getDeclaredMethod(action, int.class);
		        			m.invoke(this, brightness);
		    			}
		    			else if (action.equals("flip")) {
		    				System.out.println("enter \"h\" to flip horizontally, anything else to flip vertically.");
		        			Method m = getClass().getDeclaredMethod(action, boolean.class);
		        			m.invoke(this, in.next().equals("h"));
		    			}
		    			else {
		        			Method m = getClass().getDeclaredMethod(action);
		        			m.invoke(this, new Object[0]);
		    			}
		    			System.out.println("done. enter another action, or type 'done'");
	    			}
	    			catch (NoSuchMethodException e) {
	    				System.out.println("not a valid action, try again");
	    			} catch (IllegalAccessException e) {e.printStackTrace();System.exit(1);} 
	    			catch (IllegalArgumentException e) {e.printStackTrace();System.exit(1);}
	    			catch (InvocationTargetException e) {e.printStackTrace();System.exit(1);}

	    			action = in.next().toLowerCase();
	    		} 
	        in.close();

	        // turns our 2d array of colors into a new png file
	        create_new_image(new_image);
	        File output_file = new File("Images/" + outputName);
	        output_file.mkdirs();
	        ImageIO.write(new_image, "png", output_file);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
 }


 public void create_pixel_array(BufferedImage image) {
     w = image.getWidth();
     h = image.getHeight();
     pixels = new Color[h][];
     for (int i = 0; i < h; i++) {
         pixels[i] = new Color[w];
         for (int j = 0; j < w; j++) {
             pixels[i][j] = new Color(image.getRGB(j,i));
         }
     }
 }

 public void create_new_image(BufferedImage new_image) {
     for (int i = 0; i < pixels.length; i++) {
         for (int j = 0; j < pixels[i].length; j++) {
         		new_image.setRGB(j, i, pixels[i][j].getRGB());
         }
     }
 }

 public static void main(String[] args) {
		new PhotoshopProject();
	}

 public PhotoshopProject() {
		run();
 }
}
